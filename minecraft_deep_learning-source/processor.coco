# Imports:
import numpy as np
from PIL import Image

from rl.core import Processor

from minecraft_deep_learning.constants import (
    IMAGE_SIZE,
    INPUT_SIZE,
    GRAYSCALE,
    WINDOW_LENGTH,
)

# Processor:
class MinecraftProcessor(Processor):
    """Convert gym_minecraft output into a form understood by keras-rl."""

    def process_observation(self, observation):
        assert IMAGE_SIZE is not None and observation.shape == IMAGE_SIZE + (3,), observation.shape
        processed_observation = (
            observation
            |> Image.fromarray
            # PIL uses (width, height) not (height, width)
            |> .resize(INPUT_SIZE |> reversed |> tuple)
            |> .convert("L" if GRAYSCALE else "RGB")
            |> np.asarray$(dtype="uint8")
        )
        assert processed_observation.shape == INPUT_SIZE + ((3,) if not GRAYSCALE else ()), processed_observation.shape
        return processed_observation

    def process_state_batch(self, batch):
        assert batch.shape[1:] == (WINDOW_LENGTH,) + INPUT_SIZE + ((3,) if not GRAYSCALE else ()), batch.shape
        # We could perform this processing step in `process_observation`. In this case, however,
        # we would need to store a `float32` array instead, which is 4x more memory intensive than
        # an `uint8` array. This matters if we store 1M observations.
        processed_batch = batch.astype("float32")/255.0
        if not GRAYSCALE:
            processed_batch = (
                processed_batch
                |> np.moveaxis$(?, -1, 2)
                |> .reshape((batch.shape[0], -1) + INPUT_SIZE)
            )
        assert processed_batch.shape == (batch.shape[0], (3 if not GRAYSCALE else 1) * WINDOW_LENGTH) + INPUT_SIZE, processed_batch.shape
        return processed_batch

    def process_info(self, info):
        # dictionary-valued infos are not supported by keras-rl
        info["observation"] = (
            list(info["observation"].items())
            if info["observation"] is not None else []
        )
        return info
