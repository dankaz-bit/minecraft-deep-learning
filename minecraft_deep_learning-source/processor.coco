# Imports:
import numpy as np
from PIL import Image

from rl.core import Processor

from minecraft_deep_learning.constants import IMAGE_SIZE

# Processor:
class MinecraftProcessor(Processor):
    """Convert gym_minecraft output into a form understood by keras-rl."""

    def process_observation(self, observation) =
        assert observation.shape == IMAGE_SIZE + (3,), observation.shape
        processed_observation = (
            observation
            |> Image.fromarray
            |> .convert("L")
            |> np.asarray$(dtype="uint8")
        )
        assert processed_observation.shape == IMAGE_SIZE, processed_observation.shape
        processed_observation

    def process_state_batch(self, batch) =
        # We could perform this processing step in `process_observation`. In this case, however,
        # we would need to store a `float32` array instead, which is 4x more memory intensive than
        # an `uint8` array. This matters if we store 1M observations.
        batch.astype("float32") / 255.0

    def process_info(self, info) =
        del info["observation"]  # dictionary-valued infos are not supported by keras-rl
        info
