# Imports:
import math
from pprint import pprint

import numpy as np
from PIL import Image
from rl.core import Processor

from minecraft_deep_learning.constants import (
    IMAGE_SIZE,
    DOWNSAMPLE,
    INPUT_SIZE,
    GRAYSCALE,
    OBSERVE_DEPTH,
    CHANNELS,
    WINDOW_SIZE,
    TRIM_HEIGHT,
    DEBUG,
    LOG_INTERVAL,
    DEBUG_LOG_INTERVAL,
    MODIFY_REWARDS,
    REWARD_POSITION,
    REWARD_ANGLE,
)
from minecraft_deep_learning.display import (
    create_screen,
    show_array,
    pump_events,
)

# Processor:
class MinecraftProcessor(Processor):
    """Convert gym_minecraft output into a form understood by keras-rl."""
    screen = None
    handle_events = staticmethod(pump_events)

    def __init__(self, *args, **kwargs):
        if DEBUG:
            self.counter = -1
            self.use_display()
        super(MinecraftProcessor, self).__init__(*args, **kwargs)

    def use_display(self):
        if self.screen is None:
            self.screen_size = IMAGE_SIZE
            self.screen = create_screen(self.screen_size)

    def process_step(self, observation, reward, done, info):
        if DEBUG:
            self.counter += 1
        return (
            self.process_observation(observation),
            self.process_reward(reward, info),
            done,
            self.process_info(info),
        )

    def process_observation(self, observation):
        assert IMAGE_SIZE is not None and observation.shape == IMAGE_SIZE + (3 + OBSERVE_DEPTH,), observation.shape
        processed_observation = (
            observation
            |> Image.fromarray
            # PIL uses (width, height) not (height, width)
            |> (.resize(IMAGE_SIZE |> map$(-> _//DOWNSAMPLE) |> reversed |> tuple)
                if DOWNSAMPLE and DOWNSAMPLE != 1 else ->_)
            |> (.convert("L") if GRAYSCALE else ->_)
            |> np.asarray$(dtype="uint8")
        )
        if TRIM_HEIGHT:
            height = processed_observation.shape[0]
            processed_observation = processed_observation[height//2:]
        assert processed_observation.shape == INPUT_SIZE + ((CHANNELS,) if CHANNELS > 1 else ()), processed_observation.shape
        if self.screen is not None:
            display_image = (
                processed_observation
                |> Image.fromarray
                |> .convert("RGB")
                # PIL uses (width, height) not (height, width)
                |> .resize(self.screen_size |> reversed |> tuple)
                |> np.asarray$(dtype="uint8")
            )
            assert display_image.shape == self.screen_size + (3,), (display_image.shape, self.screen_size + (3,))
            show_array(self.screen, display_image)
            self.handle_events()
        return processed_observation

    def process_state_batch(self, batch):
        assert batch.shape[1:] == (WINDOW_SIZE,) + INPUT_SIZE + ((CHANNELS,) if CHANNELS > 1 else ()), batch.shape
        # We could perform this processing step in `process_observation`. In this case, however,
        # we would need to store a `float32` array instead, which is 4x more memory intensive than
        # a `uint8` array. This matters if we store 1M observations.
        processed_batch = batch.astype("float32")/255.0
        if CHANNELS > 1:
            # merge WINDOW_SIZE and CHANNELS together
            processed_batch = (
                np.moveaxis(processed_batch, -1, 2)
                |> .reshape((batch.shape[0], -1) + INPUT_SIZE)
            )
        assert processed_batch.shape == (batch.shape[0], CHANNELS * WINDOW_SIZE) + INPUT_SIZE, processed_batch.shape
        return processed_batch

    def process_info(self, info):
        # dictionary-valued infos are not supported by keras-rl
        info["observation"] = (
            list(info["observation"].items())
            if info["observation"] is not None else []
        )
        if DEBUG and self.counter % LOG_INTERVAL == 0:
            pprint(info)
        return info

    def process_reward(self, reward, info):
        if DEBUG:
            reward_history = [(reward, None)]
        if MODIFY_REWARDS and reward in MODIFY_REWARDS:
            reward = MODIFY_REWARDS[reward]
            if DEBUG:
                reward_history.append((reward, "modified"))
        if info["observation"] is not None:

            if REWARD_POSITION:
                reward_coords, metric = REWARD_POSITION
                x = np.asarray([
                    info["observation"][coord.upper() + "Pos"]
                    for coord in reward_coords |> sorted
                ])
                y = np.asarray([
                    pos for coord, pos in reward_coords.items() |> sorted
                ])
                reward += metric(x, y)
                if DEBUG:
                    reward_history.append((reward, "position {}".format({
                        coord: x[i] for i, coord in reward_coords |> sorted |> enumerate
                    })))

            if REWARD_ANGLE:
                desired_x, desired_z, max_angle_reward = REWARD_ANGLE
                x, z, yaw = ("XPos", "ZPos", "Yaw") |> map$(info["observation"][])
                if yaw < 0:  # force positive yaw
                    yaw += 360
                desired_yaw = (
                    math.atan2(x - desired_x, z - desired_z) + math.pi  # force positive desired_yaw
                    |> math.degrees
                )
                yaw_diff = abs(yaw - desired_yaw)
                reward += max_angle_reward * min(yaw_diff, 360 - yaw_diff)/180
                if DEBUG:
                    reward_history.append((reward, "got angle {}; desired angle {}".format(yaw, desired_yaw)))

        if DEBUG and (
            self.counter % DEBUG_LOG_INTERVAL == 0
            or any(not 0 <= r < 1 for r, why in reward_history)
        ):
            prev_reward = reward_history[0][0]
            reward_str = "\nreward: {}".format(prev_reward)
            for i in range(1, len(reward_history)):
                reward_i, reason = reward_history[i]
                reward_diff = reward_i - prev_reward
                if reward_diff >= 0:
                    reward_str += " + {}".format(reward_diff)
                else:
                    reward_str += " - {}".format(-reward_diff)
                reward_str += " ({})".format(reason)
                prev_reward = reward_i
            print("{} = {}".format(reward_str, reward))
        return reward
