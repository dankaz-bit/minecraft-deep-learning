# Imports:
import os.path
import argparse
import shutil
import traceback

from quiver_engine import server

from minecraft_deep_learning.environment import build_environment
from minecraft_deep_learning.processor import MinecraftProcessor
from minecraft_deep_learning.callbacks import use_callbacks
from minecraft_deep_learning.memory import (
    save_memory,
    load_memory,
    add_memory,
    train_on_memory,
)
from minecraft_deep_learning.model import (
    build_agent,
    build_image_model,
)
from minecraft_deep_learning.display import (
    close_display,
    get_pressed_action,
)
from minecraft_deep_learning.constants import (
    NUM_STEPS,
    LOG_INTERVAL,
    TESTING_EPISODES,
    WEIGHTS_DIR,
    ESTIMATED_TIME,
    RANDOM_START_STEPS,
    USE_ACTIONS,
    IMAGES_DIR,
    BASE_DIR,
    DATA_DIR,
    MEMORY_STEPS,
)

# Argument parser:
final_weights_file = os.path.join(WEIGHTS_DIR, "weights_final.h5f")
memory_file = os.path.join(DATA_DIR, "play_memory.json")

arguments = argparse.ArgumentParser()
arguments.add_argument(
    "--mode",
    choices=["train", "test", "play", "quiver"],
    default="train",
)
arguments.add_argument(
    "--weights",
    type=str,
    default=final_weights_file,
)
arguments.add_argument(
    "--memory",
    type=str,
    default=memory_file,
)

# Argument handling:
def run(args):
    """Process the given parsed arguments."""
    env = None
    try:
        if args.mode == "play":
            proc = MinecraftProcessor(use_display=True, always_show_rewards=True)
            proc.handle_events = -> _
            memory = load_memory(args.memory)
            env = build_environment()
            last_obs = None
            done = True
            try:
                while True:
                    if done:
                        print("observations in memory: {}".format(len(memory)))
                        env.reset()
                    action_name = None
                    while action_name is None:
                        action_name = get_pressed_action()
                    action = USE_ACTIONS.index(action_name)
                    obs, reward, done, info = (
                        action
                        |> env.step
                        |*> proc.process_step
                    )
                    if last_obs is not None:
                        memory.append((last_obs, action, reward, done))
                    last_obs = obs
            finally:
                save_memory(memory, args.memory)

        elif args.mode == "train":
            agent = build_agent()
            try:
                agent.load_weights(args.weights)
            except Exception:
                traceback.print_exc()
            add_memory(agent, load_memory(args.memory))
            print("Estimated training time: {}".format(ESTIMATED_TIME))
            if MEMORY_STEPS:
                train_on_memory(agent, MEMORY_STEPS)
            env = build_environment()
            agent.fit(
                env,
                callbacks=use_callbacks,
                nb_steps=NUM_STEPS,
                nb_max_start_steps=RANDOM_START_STEPS,
                log_interval=LOG_INTERVAL,
            )
            agent.save_weights(args.weights, overwrite=True)

        elif args.mode == "test":
            agent = build_agent()
            agent.load_weights(args.weights)
            env = build_environment()
            agent.test(
                env,
                nb_episodes=TESTING_EPISODES,
                nb_max_start_steps=RANDOM_START_STEPS,
                visualize=False,
            )

        elif args.mode == "quiver":
            agent = build_agent(use_display=False)
            agent.load_weights(args.weights)
            quiver_model = build_image_model(agent)
            temp_dir = os.path.join(BASE_DIR, "tmp")
            p_dir = os.path.join(BASE_DIR, "-p")
            try:
                server.launch(
                    quiver_model,
                    USE_ACTIONS,
                    temp_folder=temp_dir,
                    input_folder=IMAGES_DIR,
                )
            finally:
                print("Shutting down...")
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir)
                if os.path.exists(p_dir):
                    shutil.rmtree(p_dir)

        else:
            raise ValueError("unknown --mode {!r}".format(args.mode))
    finally:
        if env is not None:
            env.close()

def main(raw_args=None):
    """Parse arguments and pass them to run."""
    if raw_args is None:
        args = arguments.parse_args()
    else:
        args = arguments.parse_args(raw_args)
    try:
        run(args)
    finally:
        close_display()
