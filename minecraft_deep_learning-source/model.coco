# Imports:
import tensorflow as tf
from keras.models import Sequential
from keras.backend import image_data_format
from keras.optimizers import Adam
from keras.layers import (
    Dense,
    Flatten,
    Conv2D,
    Permute,
    Lambda,
)
from rl.memory import SequentialMemory
from rl.agents.dqn import DQNAgent

from minecraft_deep_learning.processor import MinecraftProcessor
from minecraft_deep_learning.policy import build_policies
from minecraft_deep_learning.constants import (
    INPUT_SIZE,
    DENSE_LAYERS,
    CONV_LAYERS,
    MEMORY_SIZE,
    WINDOW_SIZE,
    WARMUP_STEPS,
    CHANNELS,
    DUELING,
    DOUBLE_DQN,
    TARGET_UPDATE,
    USE_ACTIONS,
    CONV_ACTIVATION,
    DENSE_ACTIVATION,
)

# Model setup:
def build_agent(use_display=None):
    """Build an agent for the given environment."""
    num_actions = len(USE_ACTIONS)

    model = Sequential([
        Permute(
            # convert (channels, width, height) input to proper ordering
            (2, 3, 1) if image_data_format() == "channels_last" else (1, 2, 3),
            input_shape=(CHANNELS * WINDOW_SIZE,) + INPUT_SIZE,
        ),
    ] + [
        Conv2D(filters, size, strides=strides, activation=CONV_ACTIVATION)
        for filters, size, strides in CONV_LAYERS
    ] + [
        Flatten(),
    ] + [
        Dense(neurons, activation=DENSE_ACTIVATION)
        for neurons in DENSE_LAYERS
    ] + [
        Dense(len(USE_ACTIONS)),
    ])

    memory = SequentialMemory(
        limit=MEMORY_SIZE,
        window_length=WINDOW_SIZE,
    )

    processor = MinecraftProcessor(use_display=use_display)

    policy, test_policy = build_policies()

    agent = DQNAgent(
        model=model,
        nb_actions=len(USE_ACTIONS),
        policy=policy,
        test_policy=test_policy,
        memory=memory,
        processor=processor,
        nb_steps_warmup=WARMUP_STEPS,
        target_model_update=TARGET_UPDATE,
        train_interval=WINDOW_SIZE,
        enable_double_dqn=DOUBLE_DQN,
        enable_dueling_network=DUELING,
    )
    agent.compile(
        optimizer=Adam(),
        metrics=["mae", "mse"],
    )
    return agent

def build_image_model(agent) =
    """Construct a version of the model from agent that accepts raw images."""
    Sequential([
        Lambda(tensor ->
            tensor/255.0
            |> tensor -> [tensor]*WINDOW_SIZE
            |> tf.stack
            # convert (window, batch, height, width, channels) to (batch, window, channels, height, width)
            |> tf.transpose$(perm=[1, 0, 4, 2, 3])
            |> tf.reshape$(shape=(-1, CHANNELS * WINDOW_SIZE) + INPUT_SIZE),
            input_shape=INPUT_SIZE + (CHANNELS,)
        ),
    ] + [
        (def layer ->
            layer.inbound_nodes = [];
            layer)(layer)
        for layer in agent.model.layers
    ])
