# Imports:
import os.path

from rl.callbacks import (
    Callback,
    FileLogger,
    ModelIntervalCheckpoint,
)
from keras.callbacks import TensorBoard

from minecraft_deep_learning.constants import (
    DEBUG_LOG_INTERVAL,
    LOG_INTERVAL,
    DEBUG,
    USE_ACTIONS,
    LOGS_DIR,
    WEIGHTS_DIR,
)

# Callback classes:
class TensorBoardRL(TensorBoard):
    def on_epoch_end(self, epoch, logs=None) =
        super(TensorBoardRL, self).on_epoch_end(epoch)

class LogActions(Callback):
    def __init__(self, interval):
        super(LogActions, self).__init__()
        self.interval = interval
        self.counter = 0

    def on_action_begin(self, action, logs=None):
        if self.counter % self.interval == 0:
            print("\naction: {}".format(USE_ACTIONS[action]))
        self.counter += 1

# Callbacks:
use_callbacks = [
    ModelIntervalCheckpoint(
        os.path.join(WEIGHTS_DIR, "weights_{step}.h5f"),
        interval=LOG_INTERVAL,
    ),
    FileLogger(
        os.path.join(LOGS_DIR, "log.json"),
        interval=DEBUG_LOG_INTERVAL,
    ),
] + ([
    LogActions(
        interval=DEBUG_LOG_INTERVAL,
    ),
    TensorBoardRL(
        log_dir=LOGS_DIR,
        write_images=True,
    ),
] if DEBUG else [])
