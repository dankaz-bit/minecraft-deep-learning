# Imports:
import gym

from minecraft_deep_learning.constants import (
    ENV_NAME,
    IMAGE_SIZE,
    USE_ACTIONS,
    OBSERVE_DEPTH,
    DEBUG,
    LOG_INTERVAL,
    SKIP_FRAMES,
)

# Environment setup:
def build_environment():
    """Build the Minecraft gym environment."""
    env = gym.make(ENV_NAME)
    env.init(
        start_minecraft=True,
        allowDiscreteMovement=True,
        add_noop_command=True,
        # gym-minecraft uses (width, height) not (height, width)
        videoResolution=IMAGE_SIZE |> reversed |> tuple if IMAGE_SIZE is not None else None,
        videoWithDepth=OBSERVE_DEPTH,
        skip_steps=SKIP_FRAMES,
    )
    assert isinstance(env.action_space, gym.spaces.Discrete), env.action_space
    assert len(env.action_names) == 1 and len(env.action_spaces) == 1, (env.action_names, env.action_spaces)
    assert set(USE_ACTIONS) <= set(env.action_names[0]), env.action_names[0]
    use_action_space = gym.spaces.Discrete(len(USE_ACTIONS))
    if DEBUG:
        print("actions: {} -> {}".format(env.action_names[0], USE_ACTIONS))
        env._counter = 0
        old_step = env.step
        def env.step(action_index):
            if DEBUG:
                if env._counter % (LOG_INTERVAL//10) == 0:
                    print("\ntook action: {}".format(USE_ACTIONS[action_index]))
                env._counter += 1
            return old_step(action_index)
    env.action_names = [USE_ACTIONS]
    env.action_spaces = [use_action_space]
    env.action_space = use_action_space
    return env
