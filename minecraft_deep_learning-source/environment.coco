# Imports:
import os.path

import gym

from minecraft_deep_learning.constants import (
    ENV_NAME,
    IMAGE_SIZE,
    USE_ACTIONS,
    OBSERVE_DEPTH,
    DISCRETE_ACTIONS,
    CONTINUOUS_ACTIONS,
    RESET_WORLD,
    DATA_DIR,
    RECORD_MP4,
)

# Environment setup:
def build_environment():
    """Build the Minecraft gym environment."""
    env = gym.make(ENV_NAME)
    record_dest = None
    if RECORD_MP4:
        i = 0
        while record_dest is None or os.path.exists(record_dest):
            record_dest = os.path.join(DATA_DIR, "recorded_data_{}.tgz".format(i))
            i += 1
        print("Recording video to: {}".format(record_dest))
    env.init(
        start_minecraft=True,
        forceWorldReset=RESET_WORLD,
        allowDiscreteMovement=DISCRETE_ACTIONS,
        allowContinuousMovement=CONTINUOUS_ACTIONS,
        # gym-minecraft uses (width, height) not (height, width)
        videoResolution=IMAGE_SIZE |> reversed |> tuple if IMAGE_SIZE is not None else None,
        videoWithDepth=OBSERVE_DEPTH,
        recordDestination=record_dest,
        recordMP4=RECORD_MP4 if RECORD_MP4 else None,
    )
    assert isinstance(env.action_space, gym.spaces.Discrete), env.action_space
    assert len(env.action_names) == 1 and len(env.action_spaces) == 1, (env.action_names, env.action_spaces)
    print("Using actions: {} -> {}".format(env.action_names[0], USE_ACTIONS))
    use_action_space = gym.spaces.Discrete(len(USE_ACTIONS))
    env.action_names = [USE_ACTIONS]
    env.action_spaces = [use_action_space]
    env.action_space = use_action_space
    return env
